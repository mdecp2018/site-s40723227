var tipuesearch = {"pages":[{"title":"About","text":"2018 Fall 分組網誌 課程倉儲: https://github.com/mdecp2018/site-s40723227 課程投影片: https://mdecp2018.github.io/site-s40723227/reveal 課程網誌: https://mdecp2018.github.io/site-s40723227/blog","tags":"misc","url":"./pages/about/"},{"title":"2018 Fall 分組網誌","text":"課程內容 git指令 git clone 從遠端倉儲複製到近端(並建立工作目錄) git commit -m \"name\" 把暫存區之檔案提交到倉儲 git push 將近端存儲庫中物件推送到遠端倉儲 git pull=git fetch=git merge origin/master 將遠端倉儲之最新版本下載回來 git ls-remote 顯示特定遠端倉儲名稱 mkdir name 創建資料夾 git status 檢查狀態 cd name 進入資料夾 git add . 把檔案添加至暫存區(.代表全部) git reset --hard 版本號 退回到某版本 (head代表當前版本) git rm file 刪除工作區檔案 git checkout --file 恢復誤刪檔案 git log 查看版本之歷史紀錄 git branch name 建立分支 git checkout name 切換分支 git checkout -b name 建立分支並切換至最新分支 git checkout -d name 刪除分支 git stash 將所有已列入追蹤之檔案建立暫存版本 git stash -u 將所有已列入追蹤或未追蹤之檔案建立暫存版本 git stash pop 取回暫存版本 git config --global user.name \"xxx\" 設定使用者名稱 git config --global user.email \"xxx\" 設定使用者信箱 git diff file 查看修改檔案之內容 git reflog 查看命令操作歷史 git merge name 合併分支到當前分支 git init 把當前目錄變成git可管理之倉儲 git show 查看該版本之相關資訊 git bebase 把另一分支變更,當作目前使用分支之基礎 git remote add xxx 對遠端設定新增一個代號 git checkout . 回到上一個提交(當從上一個提交到下一次操作發生致命資料丟失使用) Python Python標識符 Python標識符是用來標識一個變量，函數，類，模塊或其他對象的名稱。一個標識符開始以字母A到Z或a〜z或後跟零個或多個字母下劃線（_），下劃線和數字（0〜9）。 Python中標識符內不允許標點符號，如@，$和％。 Python是一種區分大小寫的編程語言。 Python 變數命名規則 不是空序列 開頭第一個字不能是數字，可使用大小寫字母或_ 不可與內建關鍵字同名 Python3 加入Unicode(中文也可！) 保留字 下面列出了在Python中的保留字。這些保留字不可以被用作常量或變量，或任何其它標識符。所有Python關鍵字隻包含小寫字母。 and, as, assert, break, class, continue, def, del, elif, else, except, finally, for, from, global, if, import, in, is, lambda, nonlocal, not, or, pass, raise, return, try, while, with, yield 數值資料型態 整數型態：int、bool 表示不限範圍的整數數字 : int (True or False)當被用在數值運算式中，True值為1，False值為0 :bool 浮點數型態：float、complex 雙精度浮點數 : float 雙精度浮點數表示複數，複數z的實部和虛部可以通過z.real和z.imag取得 : complex 數值運算符 + - * / ：除法，結果存為float // ：除法只留整數部分 % ：取餘數 比較運算符 Python 提供了以下這些比較運算符：<(小於)、>(大於)、<=(小於或等於)、>=(大於或等於)、==(等於)、!=(不等於) 邏輯運算符 Python 提供了and(左右同時成立)、or(其中一個成立)、not(反向布林值) 條件分支 If , elif , else elif可以有多個或不使用，最後else也可以選擇用或不用 操作影片 第1周 說明如何利用 p37 中的 git 建立個人的 Github Pages 網站 進入github.io網站，創建個人帳號，並且從https://github.com/mdecourse/2018fall取得 CMSimfly.Reveal.js 與 Pelican Blog 內容。 第2周 說明如何以 ShareX 取圖, 如何管理 CMSimfly 作業倉儲 練習利用ShareX取圖.錄影.基本設定。 登入github.io帳號進入github classroom系統領取對應之期中作業，利用settings 將內定branch設為gh-pages,，git clone作業倉儲至近端之後，練習Onshape的各項過程資料存入CMSimfly. Reveal.js與Pelican Blog中。 第3周 git 基本操作練習。 第4周 說明如何管理網誌。(以 Leo Editor 開啟 config/pelican.leo ) 第5周 說明如何管理簡報。(以 Leo Editor 開啟 config/reveal.leo) 第6周 說明如何更新README md 第7周 說明如何升級最新的 CMSimfly 倉儲中的 flaskapp.py 第8周 在簡報中插入影片 課程倉儲 利用 Github 倉儲存放與計算機程式相關的資料, 有幾項好處: 第一, 在不自建網站的情況下, 目前 Github 仍允許免費使用, 管理者除了可以利用網際模式將資料送到對應的 cp github 倉儲 外, 也可以利用近端的 git 客戶端程式, 以分散式版次的流程管理各階段的改版資料. 第二, Github 提供的 Github Pages, 可以讓純 html 加上 Javascript 的網站, 直接在 cp 課程網站 伺服. 第三, 改版後的 CMSimfly, 加上 Pelican 靜態網誌與 Reveal.js 投影片系統, 均為靜態網站資料, 可以直接整合一起, 透過一個網址當作上課參考資料. 該學習哪種程式語言? C/C++、Python、Lua 或 Javascript? 都可以. 在這裡, 學 C/C++ 是為了編寫 Arduino 控制程式, 以及結合 Qt5 建立各種能快速進行工程分析的程式庫, 學習 Python 是為了快速完成 C/C++ 無法迅速完成的分析、模擬與運算, 也能透過 PyQt5 建立視窗程式, 或者呼叫 Flask 建立能在網際環境中執行的協同設計套件. 學習 Lua 是為了能在 V-rep 中使用, 至於 Javascript, 已經無所不在, 尤其在網際成是開發過程, 更是重要, 有其學習的必要性.","tags":"Misc","url":"./2018-Fall-Project-Blog.html"}]};